// app/api/chat/route.ts
import { openai } from "@ai-sdk/openai";
import {
  jsonSchema,
  streamText,
  type CoreMessage,
  type CoreTool,
} from "ai";

interface Fragment {
  text: string;
}
type IncomingMessage = {
  role: "system" | "user" | "assistant";
  content: string | Fragment[];
};
interface Law {
  title: string;
  content: string;
  url?: string;
}
interface ToolEntry {
  parameters: Record<string, unknown>;
}

export const runtime = "edge";
export const maxDuration = 30;

export async function POST(req: Request) {
  const body = (await req.json()) as {
    messages?: IncomingMessage[];
    system?: string;
    tools?: Record<string, ToolEntry>;
  };

  const rawMessages = body.messages ?? [];
  // const initialSystem = body.system ?? "";
  const tools = body.tools ?? {};

  const messages: CoreMessage[] = rawMessages.map((m) => {
    const content =
      typeof m.content === "string"
        ? m.content
        : m.content.map((frag) => frag.text).join("");
    return { role: m.role, content };
  });

  const question = messages[messages.length - 1]?.content ?? "";

  // RAG
  const ctxRes = await fetch("https://qanooni-1.onrender.com/context", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ question }),
  });
  if (!ctxRes.ok) {
    throw new Error("Context fetch failed: " + (await ctxRes.text()));
  }


  const {message: extraMsgRaw, laws } =
    (await ctxRes.json()) as {
      system?: string;
      message: IncomingMessage;
      laws: Law[];
    };

  const extraContent =
    typeof extraMsgRaw.content === "string"
      ? extraMsgRaw.content
      : extraMsgRaw.content.map((f) => f.text).join("");
  const extraMsg: CoreMessage = {
    role: extraMsgRaw.role,
    content: extraContent,
  };

  const augmentedMessages = [...messages, extraMsg];

  // Finetuned
  const fineRes = await fetch("https://qanooni-1.onrender.com/finetuned", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ question }),
  });

  

  const fineJSON = await fineRes.json();
  const finetunedAnswer = fineJSON.answer ?? "‚ùå ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ŸàŸÑŸäÿØ ÿ±ÿØ ŸÖÿÆÿµÿµ.";

  const lawContext = laws.map((l) => `${l.title}: ${l.content}`).join("\n\n");
  const systemPrompt = [
    "ÿ£ŸÜÿ™ ŸÖÿ≥ÿßÿπÿØ ŸÇÿßŸÜŸàŸÜŸäÿå ŸàŸäÿ¨ÿ® ÿ£ŸÜ ÿ™ÿ±ÿØ ÿπŸÑŸâ ÿßŸÑÿ≥ÿ§ÿßŸÑ ÿ®ÿßŸÑÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿ™ÿßŸÑŸä:",
    "1. **ÿßÿ®ÿØÿ£ ÿ®ÿ±ÿØ ŸÖÿÆÿ™ÿµÿ±**:\nŸÇŸÖ ÿ®ÿ•ÿπÿ∑ÿßÿ° ÿ•ÿ¨ÿßÿ®ÿ© ŸÖÿ®ÿßÿ¥ÿ±ÿ© ŸàŸàÿßÿ∂ÿ≠ÿ© ŸÖÿ≥ÿ™ÿÆŸÑÿµÿ© ŸÖŸÜ ŸÅŸáŸÖŸÉ ŸÑŸÑÿ≥ŸäÿßŸÇ ÿßŸÑŸÇÿßŸÜŸàŸÜŸä.",
    "2. **ÿ´ŸÖ ŸÇÿØŸÖ ÿßŸÑÿ±ÿØ ÿßŸÑÿ™ŸÅÿµŸäŸÑŸä ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßŸÑŸÇÿßŸÜŸàŸÜ**:\nÿßÿ¥ÿ±ÿ≠ ÿ®ÿ¥ŸÉŸÑ ŸÖŸÅÿµŸÑ ÿßÿπÿ™ŸÖÿßÿØŸãÿß ÿπŸÑŸâ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ™Ÿä ŸÇÿ±ÿ£ÿ™Ÿáÿß ŸÅŸä ÿßŸÑÿ≥ŸäÿßŸÇ ÿØŸàŸÜ ÿ•ÿπÿßÿØÿ© ŸÉÿ™ÿßÿ®ÿ© ÿßŸÑÿ≥ŸäÿßŸÇ ŸÜŸÅÿ≥Ÿá.",
    "3. üîó **ÿ£ÿÆŸäÿ±ÿßŸãÿå ÿ£ÿ∂ŸÅ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπ ÿßŸÑÿ™Ÿä ÿßÿ≥ÿ™ŸÜÿØÿ™ ÿ•ŸÑŸäŸáÿß ŸÅŸÇÿ∑ ŸÉÿ±ÿßÿ®ÿ∑ ŸÑŸÉŸÑ ŸÖÿßÿØÿ© ÿ∞ÿßÿ™ ÿµŸÑÿ©.**",
    "üîç ŸÖÿ´ÿßŸÑ ŸÉÿßŸÖŸÑ ŸÑÿ™Ÿàÿ∂Ÿäÿ≠ ÿßŸÑÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®:",
    "ÿ•ÿ∞ÿß ÿßŸÑÿπŸÖŸäŸÑ ÿ≥ÿ£ŸÑ: ŸÖÿß ŸÖÿØÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ŸÇÿ®ŸÑ ÿ•ŸÜŸáÿßÿ° ÿπŸÇÿØ ÿßŸÑÿπŸÖŸÑÿü",
    "\nÿßŸÑÿ±ÿØ:",
    "Ÿáÿ∞ÿß ŸáŸà ÿßŸÑÿ±ÿØ ÿßŸÑŸÖÿÆÿ™ÿµÿ± ŸÑÿ≥ÿ§ÿßŸÑŸÉÿå\nÿ¥Ÿáÿ±ŸäŸÜ/ÿ¥Ÿáÿ± (ÿ≠ÿ≥ÿ® ÿßŸÑÿßÿ™ŸÅÿßŸÇ) ŸÇÿ®ŸÑ ÿ•ŸÜŸáÿßÿ° ÿπŸÇÿØ ÿßŸÑÿπŸÖŸÑ ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ ÿßŸÑŸÖÿØÿ©.",
    "\nŸàÿßŸÑÿ±ÿØ ÿ®ÿßŸÑÿ™ŸÅÿµŸäŸÑ ÿ®ŸÜÿßÿ° ÿπŸÑŸâ ŸÇÿßŸÜŸàŸÜ ÿßŸÑÿπŸÖŸÑ:\n" +
      "ŸÖÿØÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ŸÇÿ®ŸÑ ÿ•ŸÜŸáÿßÿ° ÿπŸÇÿØ ÿßŸÑÿπŸÖŸÑ ÿ™ÿÆÿ™ŸÑŸÅ ÿ®ŸäŸÜ ÿßŸÑÿ®ŸÑÿØÿßŸÜ ŸàŸäŸÖŸÉŸÜ ÿ£ŸÜ ÿ™ÿπÿ™ŸÖÿØ ÿπŸÑŸâ ŸÜŸàÿπ ÿßŸÑÿπŸÇÿØ ŸàŸÅÿ™ÿ±ÿ© ÿßŸÑÿÆÿØŸÖÿ©. ÿ•ŸÑŸäŸÉ ÿ®ÿπÿ∂ ÿßŸÑÿ•ÿ±ÿ¥ÿßÿØÿßÿ™ ÿßŸÑÿπÿßŸÖÿ© ÿßŸÑÿ¥ÿßÿ¶ÿπÿ© ŸÅŸä ÿßŸÑŸÉÿ´Ÿäÿ± ŸÖŸÜ ÿßŸÑÿ£ŸÜÿ∏ŸÖÿ©:\n\n" +
      "ÿßŸÑÿπŸÇŸàÿØ ÿßŸÑŸÖÿ≠ÿØÿØÿ© ÿßŸÑŸÖÿØÿ©: ŸäŸÜÿ™ŸáŸä ÿßŸÑÿπŸÇÿØ ÿ®ÿßŸÜÿ™Ÿáÿßÿ° ŸÖÿØÿ™Ÿá ÿßŸÑŸÖÿ≠ÿØÿØÿ©ÿå ŸÑÿ∞ÿß ŸÇÿØ ŸÑÿß Ÿäÿ™ÿ∑ŸÑÿ® ÿ•ÿ¥ÿπÿßÿ±Ÿãÿß ŸÖÿ≥ÿ®ŸÇŸãÿß. ŸàŸÖÿπ ÿ∞ŸÑŸÉÿå ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ•ŸÜŸáÿßÿ§Ÿá ŸÇÿ®ŸÑ ÿßŸÜÿ™Ÿáÿßÿ° ÿßŸÑŸÖÿØÿ©ÿå ŸÅŸÇÿØ ÿ™ÿ≠ÿ™ŸàŸä ÿßŸÑÿπŸÇŸàÿØ ÿπŸÑŸâ ÿ¥ÿ±Ÿàÿ∑ ŸÑŸÑÿ•ÿ¥ÿπÿßÿ±.\n\n" +
      "ÿßŸÑÿπŸÇŸàÿØ ÿ∫Ÿäÿ± ÿßŸÑŸÖÿ≠ÿØÿØÿ© ÿßŸÑŸÖÿØÿ©:\n- ÿÆŸÑÿßŸÑ ŸÅÿ™ÿ±ÿ© ÿßŸÑÿ™ÿ¨ÿ±ÿ®ÿ©: ÿ™ŸÉŸàŸÜ ŸÖÿØÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ÿπÿßÿØÿ© ÿ£ŸÇÿµÿ±ÿå ŸÖÿ´ŸÑ ÿ£ÿ≥ÿ®Ÿàÿπ ÿ•ŸÑŸâ ÿ£ÿ≥ÿ®ŸàÿπŸäŸÜ.\n- ÿ®ÿπÿØ ŸÅÿ™ÿ±ÿ© ÿßŸÑÿ™ÿ¨ÿ±ÿ®ÿ©: ÿ™ÿ™ÿ±ÿßŸàÿ≠ ŸÖÿØÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ŸÖŸÜ ÿ¥Ÿáÿ± ÿ•ŸÑŸâ ÿ´ŸÑÿßÿ´ÿ© ÿ£ÿ¥Ÿáÿ±ÿå ÿ≠ÿ≥ÿ® ÿ≥ŸÜŸàÿßÿ™ ÿßŸÑÿÆÿØŸÖÿ© ŸàŸÑŸàÿßÿ¶ÿ≠ ÿßŸÑÿπŸÖŸÑ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©.\n\n" +
      "ÿßŸÑŸÇŸàÿßŸÜŸäŸÜ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©: ÿ™ÿÆÿ™ŸÑŸÅ ŸÖŸÜ ÿ®ŸÑÿØ ŸÑÿ¢ÿÆÿ±. ŸÖŸÜ ÿßŸÑŸÖŸáŸÖ ÿßŸÑÿ±ÿ¨Ÿàÿπ ÿ•ŸÑŸâ ŸÇÿßŸÜŸàŸÜ ÿßŸÑÿπŸÖŸÑ ÿßŸÑŸÖÿ≠ŸÑŸä ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑŸÖÿØÿ© ÿßŸÑÿØŸÇŸäŸÇÿ© ŸàÿßŸÑŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ•ÿ∂ÿßŸÅŸäÿ©.\n\n" +
      "ÿßÿ™ŸÅÿßŸÇŸäÿßÿ™ ÿßŸÑÿπŸÖŸÑ ÿßŸÑÿ¨ŸÖÿßÿπŸäÿ©: ŸÇÿØ ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ¥ÿ±Ÿàÿ∑ ÿÆÿßÿµÿ© ÿ™ÿÆÿ™ŸÑŸÅ ÿπŸÜ ÿßŸÑŸÇÿßŸÜŸàŸÜ ÿßŸÑÿπÿßŸÖ.\n\n" +
      "ÿßŸÑÿπŸÇÿØ ÿßŸÑŸÅÿ±ÿØŸä: ŸäŸÖŸÉŸÜ ÿ£ŸÜ Ÿäÿ™ÿ∂ŸÖŸÜ ÿ¥ÿ±Ÿàÿ∑Ÿãÿß ÿ™ÿ™ÿπŸÑŸÇ ÿ®ŸÖÿØÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿå ÿ∑ÿßŸÑŸÖÿß ÿ£ŸÜŸáÿß ŸÑÿß ÿ™ŸÇŸÑ ÿπŸÜ ÿßŸÑÿ≠ÿØŸàÿØ ÿßŸÑÿØŸÜŸäÿß ÿßŸÑÿ™Ÿä Ÿäÿ≠ÿØÿØŸáÿß ÿßŸÑŸÇÿßŸÜŸàŸÜ.\n\n" +
      "ÿØÿßÿ¶ŸÖŸãÿß ŸäŸèŸÅÿ∂ŸÑ ŸÖÿ±ÿßÿ¨ÿπÿ© ÿπŸÇÿØ ÿßŸÑÿπŸÖŸÑ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ ŸàÿßŸÑŸÇŸàÿßŸÜŸäŸÜ ÿßŸÑŸÖÿ≠ŸÑŸäÿ© ŸÑŸÑÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿßŸÑÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿØŸÇŸäŸÇÿ© ŸàÿßŸÑÿßŸÖÿ™ÿ´ÿßŸÑ ÿßŸÑŸÉÿßŸÖŸÑ.",
    "\nŸàÿ•ŸÑŸäŸÉ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπ:\n- https://nezams.com/ŸÜÿ∏ÿßŸÖ-ÿßŸÑÿπŸÖŸÑ/#subject-5",
    "\n‚úÖ ÿßŸÑÿ¢ŸÜ ÿ∑ÿ®ŸÇ Ÿáÿ∞ÿß ÿßŸÑÿ™ŸÜÿ≥ŸäŸÇ ÿπŸÑŸâ ÿßŸÑÿ≥ÿ§ÿßŸÑ ÿßŸÑÿ™ÿßŸÑŸä:",
    "ÿßŸÑÿ≥ŸäÿßŸÇ ÿßŸÑŸÇÿßŸÜŸàŸÜŸä:\n" + lawContext,
    "ÿßŸÑŸÖÿ±ÿßÿ¨ÿπ:\n" + laws.map((l) => `- ${l.url}`).join("\n"),
  ]
    .filter(Boolean)
    .join("\n\n");
  
  // 3Ô∏è‚É£ Stream final output
  const toolsForStream: Record<string, CoreTool> = Object.fromEntries(
    Object.entries(tools).map(([name, tool]) => [
      name,
      {
        parameters: jsonSchema(tool.parameters),
      },
    ])
  );

  const result = streamText({
    model: openai("gpt-4o"),
    system: systemPrompt,
    messages: augmentedMessages,
    tools: toolsForStream,
  });

  const ragStream = result.toDataStreamResponse();

  // üß† Attach metadata headers if needed
  ragStream.headers.set("X-Finetuned-Answer", encodeURIComponent(finetunedAnswer));
  ragStream.headers.set("X-References", encodeURIComponent(JSON.stringify(laws.map((l) => l.url))));

  return ragStream;
}